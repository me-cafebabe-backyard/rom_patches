From 3c7bb7f7d244b7535d79009b6766eee6ff69e283 Mon Sep 17 00:00:00 2001
From: me-cafebabe <me_cafebabe@hotmail.com>
Date: Tue, 4 Oct 2022 14:09:40 +0000
Subject: [PATCH 6/7] Revert "sf: Exclude VDS use of HWC on non-UM platforms"

I'm not going to build for any non-UM device on my AOSP tree

This reverts commit 801419894fb5f82448e73bcd2f3ee1d2d84b387f.

Change-Id: I43dce6378d40648d79d1bcee9419e5bf7e836b94
---
 services/surfaceflinger/Android.bp         |  2 +-
 services/surfaceflinger/SurfaceFlinger.cpp | 15 +--------------
 2 files changed, 2 insertions(+), 15 deletions(-)

diff --git a/services/surfaceflinger/Android.bp b/services/surfaceflinger/Android.bp
index c43a3c39e8..d413a2ad78 100644
--- a/services/surfaceflinger/Android.bp
+++ b/services/surfaceflinger/Android.bp
@@ -26,7 +26,6 @@ cc_defaults {
     defaults: [
         "surfaceflinger_defaults",
         "skia_renderengine_deps",
-        "surfaceflinger_qcom_ext_defaults",
     ],
     cflags: [
         "-DLOG_TAG=\"SurfaceFlinger\"",
@@ -81,6 +80,7 @@ cc_defaults {
         "android.hardware.graphics.composer@2.2-command-buffer",
         "android.hardware.graphics.composer@2.3-command-buffer",
         "android.hardware.graphics.composer@2.4-command-buffer",
+        "display_intf_headers",
     ],
     export_static_lib_headers: [
         "libcompositionengine",
diff --git a/services/surfaceflinger/SurfaceFlinger.cpp b/services/surfaceflinger/SurfaceFlinger.cpp
index 336c04c3a6..1dda89ad2f 100644
--- a/services/surfaceflinger/SurfaceFlinger.cpp
+++ b/services/surfaceflinger/SurfaceFlinger.cpp
@@ -138,13 +138,11 @@
 #include "android-base/stringprintf.h"
 #include "android-base/strings.h"
 
-#ifdef QCOM_UM_FAMILY
 #if __has_include("QtiGralloc.h")
 #include "QtiGralloc.h"
 #else
 #include "gralloc_priv.h"
 #endif
-#endif
 
 #define MAIN_THREAD ACQUIRE(mStateLock) RELEASE(mStateLock)
 
@@ -2770,11 +2768,7 @@ sp<DisplayDevice> SurfaceFlinger::setupNewDisplayDeviceInternal(
 
 void SurfaceFlinger::processDisplayAdded(const wp<IBinder>& displayToken,
                                          const DisplayDeviceState& state) {
-#ifdef QCOM_UM_FAMILY
     bool canAllocateHwcForVDS = false;
-#else
-    bool canAllocateHwcForVDS = true;
-#endif
     ui::Size resolution(0, 0);
     ui::PixelFormat pixelFormat = static_cast<ui::PixelFormat>(PIXEL_FORMAT_UNKNOWN);
     if (state.physical) {
@@ -2789,7 +2783,6 @@ void SurfaceFlinger::processDisplayAdded(const wp<IBinder>& displayToken,
         status = state.surface->query(NATIVE_WINDOW_FORMAT, &format);
         ALOGE_IF(status != NO_ERROR, "Unable to query format (%d)", status);
         pixelFormat = static_cast<ui::PixelFormat>(format);
-#ifdef QCOM_UM_FAMILY
         if (mVirtualDisplayIdGenerators.hal) {
             size_t maxVirtualDisplaySize = getHwComposer().getMaxVirtualDisplayDimension();
             if (maxVirtualDisplaySize == 0 ||
@@ -2804,7 +2797,7 @@ void SurfaceFlinger::processDisplayAdded(const wp<IBinder>& displayToken,
                }
             }
         }
-#endif
+
     } else {
         // Virtual displays without a surface are dormant:
         // they have external state (layer stack, projection,
@@ -6641,7 +6634,6 @@ status_t SurfaceFlinger::setDesiredDisplayModeSpecsInternal(
     return NO_ERROR;
 }
 
-#ifdef QCOM_UM_FAMILY
 bool SurfaceFlinger::canAllocateHwcDisplayIdForVDS(uint64_t usage) {
     uint64_t flag_mask_pvt_wfd = ~0;
     uint64_t flag_mask_hw_video = ~0;
@@ -6655,11 +6647,6 @@ bool SurfaceFlinger::canAllocateHwcDisplayIdForVDS(uint64_t usage) {
     return (allowHwcForVDS || ((usage & flag_mask_pvt_wfd) &&
             (usage & flag_mask_hw_video)));
 }
-#else
-bool SurfaceFlinger::canAllocateHwcDisplayIdForVDS(uint64_t) {
-    return true;
-}
-#endif
 
 status_t SurfaceFlinger::setDesiredDisplayModeSpecs(
         const sp<IBinder>& displayToken, ui::DisplayModeId defaultMode, bool allowGroupSwitching,
-- 
2.30.2

